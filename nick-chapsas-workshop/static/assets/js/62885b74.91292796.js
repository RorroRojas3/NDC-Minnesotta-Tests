"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[2090],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={description:"Let's write tests for the remaining use-cases"},o="Exercise: The rest of the tests",i={unversionedId:"integration-testing/ui/more-tests",id:"integration-testing/ui/more-tests",title:"Exercise: The rest of the tests",description:"Let's write tests for the remaining use-cases",source:"@site/docs/integration-testing/ui/more-tests.md",sourceDirName:"integration-testing/ui",slug:"/integration-testing/ui/more-tests",permalink:"/integration-testing/ui/more-tests",draft:!1,tags:[],version:"current",frontMatter:{description:"Let's write tests for the remaining use-cases"},sidebar:"docs",previous:{title:"Our first UI integration test",permalink:"/integration-testing/ui/first-integration-test"},next:{title:"Performance testing",permalink:"/category/performance-testing"}},l={},u=[{value:"Solutions",id:"solutions",level:3}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exercise-the-rest-of-the-tests"},"Exercise: The rest of the tests"),(0,a.kt)("p",null,"Now it is your turn to practice.\nThere are many tests that can be written for our website and you should take it upon your self to practice them even if they are not in the list below.\nRemember, practice makes perfect and you only learn by doing."),(0,a.kt)("p",null,"Write the following tests:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Get_ShouldReturnCustomer_WhenCustomerExists")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GetAll_ShouldContainCustomer_WhenCustomerExists")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Update_ShouldUpdateCustomer_WhenDataIsValid")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Delete_ShouldDeleteCustomer_WhenCustomerExists"))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you need to Accept a browser-level dialog (like the one that appears when you delete a customer),\nyou can use the following piece of code:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"_page.Dialog += (_, dialog) => dialog.AcceptAsync();\n"))),(0,a.kt)("p",null,"Challenge yourselves to find more actions to test and only expand the solutions below if you are stuck and you need a little help."),(0,a.kt)("h3",{id:"solutions"},"Solutions"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Get_ShouldReturnCustomer_WhenCustomerExists"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="GetCustomerTests.cs"',title:'"GetCustomerTests.cs"'},'[Fact]\npublic async Task Get_ShouldReturnCustomer_WhenCustomerExists()\n{\n    // Arrange\n    var customer = _customerGenerator.Generate();\n    _testingContext.GitHubApiServer.SetupUser(customer.GitHubUsername);\n    await _customerRepository.CreateAsync(customer);\n\n    // Act\n    await _page.GotoAsync($"{TestingContext.AppUrl}/customer/{customer.Id}");\n\n    // Assert\n    var fullName = await _page.Locator("id=fullname-field").InnerTextAsync();\n    var email = await _page.Locator("id=email-field").InnerTextAsync();\n    var githubUsername = await _page.Locator("id=github-username-field").InnerTextAsync();\n    var dateOfBirth = await _page.Locator("id=dob-field").InnerTextAsync();\n\n    fullName.Should().Be(customer.FullName);\n    email.Should().Be(customer.Email);\n    githubUsername.Should().Be(customer.GitHubUsername);\n    dateOfBirth.Should().Be(customer.DateOfBirth.ToString("dd/MM/yyyy"));\n}\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"GetAll_ShouldContainCustomer_WhenCustomerExists"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="GetAllCustomersTests.cs"',title:'"GetAllCustomersTests.cs"'},'[Fact]\npublic async Task GetAll_ShouldContainCustomer_WhenCustomerExists()\n{\n    // Arrange\n    var customer = _customerGenerator.Generate();\n    _testingContext.GitHubApiServer.SetupUser(customer.GitHubUsername);\n    await _customerRepository.CreateAsync(customer);\n\n    // Act\n    await _page.GotoAsync($"{TestingContext.AppUrl}/customers");\n\n    // Assert\n    var tableRow = _page.Locator($"tr:has-text(\'{customer.Email}\')");\n    var tableCells = tableRow.Locator("td");\n\n    var fullName = await tableCells.Nth(0).InnerTextAsync();\n    var email = await tableCells.Nth(1).InnerTextAsync();\n    var githubUsername = await tableCells.Nth(2).InnerTextAsync();\n    var dateOfBirth = await tableCells.Nth(3).InnerTextAsync();\n\n    fullName.Should().Be(customer.FullName);\n    email.Should().Be(customer.Email);\n    githubUsername.Should().Be(customer.GitHubUsername);\n    dateOfBirth.Should().Be(customer.DateOfBirth.ToString("dd/MM/yyyy"));\n}\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Update_ShouldUpdateCustomer_WhenDataIsValid"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="UpdateCustomerTests.cs"',title:'"UpdateCustomerTests.cs"'},'[Fact]\npublic async Task Update_ShouldUpdateCustomer_WhenDataIsValid()\n{\n    // Arrange\n    var customer = _customerGenerator.Generate();\n    var newCustomer = _customerGenerator.Generate();\n    _testingContext.GitHubApiServer.SetupUser(customer.GitHubUsername);\n    await _customerRepository.CreateAsync(customer);\n    \n    await _page.GotoAsync($"{TestingContext.AppUrl}/update-customer/{customer.Id}");\n    \n    // Act\n    await _page.Locator("id=fullname").FillAsync(newCustomer.FullName);\n    await _page.Locator("text=Submit").ClickAsync();\n\n    // Assert\n    var updatedCustomer = await _customerRepository.GetAsync(customer.Id);\n    updatedCustomer!.FullName.Should().Be(newCustomer.FullName);\n}\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Delete_ShouldDeleteCustomer_WhenCustomerExists"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DeleteCustomerTests.cs"',title:'"DeleteCustomerTests.cs"'},'[Fact]\npublic async Task Delete_ShouldDeleteCustomer_WhenCustomerExists()\n{\n    // Arrange    \n    var customer = _customerGenerator.Generate();\n    _testingContext.GitHubApiServer.SetupUser(customer.GitHubUsername);\n    await _customerRepository.CreateAsync(customer);\n    \n    await _page.GotoAsync($"{TestingContext.AppUrl}/customers");\n    _page.Dialog += (_, dialog) => dialog.AcceptAsync();\n\n    // Act\n    await _page.Locator("text=\'Delete\'").ClickAsync();\n\n    // Assert\n    var customerExists = await _customerRepository.GetAsync(customer.Id);\n    customerExists.Should().BeNull();\n}\n'))))}m.isMDXComponent=!0}}]);