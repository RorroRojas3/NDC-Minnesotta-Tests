"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[7207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={description:"Let's see how we can start and stop Docker for testing"},a="Running Docker Compose",s={unversionedId:"integration-testing/ui/dealing-with-docker-compose",id:"integration-testing/ui/dealing-with-docker-compose",title:"Running Docker Compose",description:"Let's see how we can start and stop Docker for testing",source:"@site/docs/integration-testing/ui/dealing-with-docker-compose.md",sourceDirName:"integration-testing/ui",slug:"/integration-testing/ui/dealing-with-docker-compose",permalink:"/integration-testing/ui/dealing-with-docker-compose",draft:!1,tags:[],version:"current",frontMatter:{description:"Let's see how we can start and stop Docker for testing"},sidebar:"docs",previous:{title:"Bootstrapping our tests",permalink:"/integration-testing/ui/test-setup"},next:{title:"Introduction to Browser testing",permalink:"/integration-testing/ui/browser-testing"}},l={},c=[{value:"Implementing the code",id:"implementing-the-code",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-docker-compose"},"Running Docker Compose"),(0,o.kt)("p",null,"Since we won't be using Testcontainers to run our tests we need a way to run the integration testing specific docker-compose.yml file.\nWe will be doing that using a Nuget package called ",(0,o.kt)("inlineCode",{parentName:"p"},"Ductus.FluentDocker"),". It should already be installed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Customers.WebApp.Tests.Integration")," project."),(0,o.kt)("p",null,"This package allows us to use a fluent API to control docker from our tests. The core idea is the same as with Testcontainers.\nWhen tests start running, we will start the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.integration.yml")," file and when they are done we will stop."),(0,o.kt)("h2",{id:"implementing-the-code"},"Implementing the code"),(0,o.kt)("p",null,"All of our code will be going into the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestingContext.cs")," since that's the class controlling the lifecycle of our tests."),(0,o.kt)("p",null,"First we need to create a path to our docker compose file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'private static readonly string DockerComposeFile = Path.Combine(Directory.GetCurrentDirectory(), (TemplateString)"../../../docker-compose.integration.yml");\n')),(0,o.kt)("p",null,"And then we need to create an ",(0,o.kt)("inlineCode",{parentName:"p"},"ICompositeService")," using FluentDocker's ",(0,o.kt)("inlineCode",{parentName:"p"},"Builder")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public const string AppUrl = "https://localhost:7780";\n\nprivate readonly ICompositeService _dockerService = new Builder()\n    .UseContainer()\n    .UseCompose()\n    .FromFile(DockerComposeFile)\n    .RemoveOrphans()\n    .WaitForHttp("test-app", AppUrl)\n    .Build();\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"_dockerService")," will now use our ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.integration.yml")," and will wait until ",(0,o.kt)("inlineCode",{parentName:"p"},"test-app")," is available before it moves on when we invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"Start()")," method,\nensuring that our service and database is running before any tests run."),(0,o.kt)("p",null,"Then all we need to do is call the ",(0,o.kt)("inlineCode",{parentName:"p"},"_dockerService.Start();")," method in the ",(0,o.kt)("inlineCode",{parentName:"p"},"InitializeAsync")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"_dockerService.Dispose();")," method in the ",(0,o.kt)("inlineCode",{parentName:"p"},"DisposeAsync")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestingContext"),"."),(0,o.kt)("p",null,"And that's it. All the setup needed for Docker and its execution is done and we can move to taking a loot at how we can run an in-memory browser for our tests."))}u.isMDXComponent=!0}}]);