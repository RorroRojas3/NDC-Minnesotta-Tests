"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[4735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,g=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8507:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={description:"Now let's absolutely perfect the cleanup approach for our data"},i="Perfecting database cleanup",o={unversionedId:"integration-testing/api/perfecting-data-cleanup",id:"integration-testing/api/perfecting-data-cleanup",title:"Perfecting database cleanup",description:"Now let's absolutely perfect the cleanup approach for our data",source:"@site/docs/integration-testing/api/perfecting-data-cleanup.md",sourceDirName:"integration-testing/api",slug:"/integration-testing/api/perfecting-data-cleanup",permalink:"/integration-testing/api/perfecting-data-cleanup",draft:!1,tags:[],version:"current",frontMatter:{description:"Now let's absolutely perfect the cleanup approach for our data"},sidebar:"docs",previous:{title:"Our own WebApplicationFactory",permalink:"/integration-testing/api/our-own-waf"},next:{title:"Creating databases on demand",permalink:"/integration-testing/api/databases-on-demand"}},l={},p=[{value:"Respawn",id:"respawn",level:2},{value:"Integrating the Respawner",id:"integrating-the-respawner",level:2},{value:"Using reset in the tests",id:"using-reset-in-the-tests",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"perfecting-database-cleanup"},"Perfecting database cleanup"),(0,r.kt)("p",null,"So no we run all our tests sequentially and they all share the same datastore.\nWe have a pretty robust way to cleanup data between tests,\nbut the main problem with it is that you won't always have an exposed endpoint that correctly cleans your data up."),(0,r.kt)("p",null,"This is where ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/jbogard/Respawn"},"Respawn"))," comes in."),(0,r.kt)("h2",{id:"respawn"},"Respawn"),(0,r.kt)("p",null,"Respawn is a Nuget package that helps with resetting test databases to a clean state.\nInstead of deleting data at the end of the test or have a loose transaction that is being rolled back,\nRespawn will dynamically reset the database back to a clean state by intelligently deleting data from tables. "),(0,r.kt)("p",null,"To use it, first let's install it."),(0,r.kt)("h2",{id:"integrating-the-respawner"},"Integrating the Respawner"),(0,r.kt)("p",null,"We now need to integrate the Respawner instance into our tests.\nFirst we need to objects. The DbConnection that we want Respawn to use and the Respawner instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="CustomerApiFactory.cs"',title:'"CustomerApiFactory.cs"'},"private DbConnection _dbConnection = default!;\nprivate Respawner _respawner = default!;\n")),(0,r.kt)("p",null,"Both of these will be initialized in the ",(0,r.kt)("inlineCode",{parentName:"p"},"InitializeAsync")," method after the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateClient")," call to ensure that any migrations have run."),(0,r.kt)("p",null,"Initializing the connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'_dbConnection = new NpgsqlConnection("Server=localhost;Port=5432;Database=mydb;User ID=workshop;Password=changeme;");\n')),(0,r.kt)("p",null,"Now for the Respawner we first need to open the database connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"await _dbConnection.OpenAsync();\n")),(0,r.kt)("p",null,"And then we need to create the Respawner instance with the Postgres adapter and the appropriate schemas included:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'_respawner = await Respawner.CreateAsync(_dbConnection, new RespawnerOptions\n{\n    DbAdapter = DbAdapter.Postgres,\n    SchemasToInclude = new[] { "public" }\n});\n')),(0,r.kt)("p",null,"Now everything in Postgres' public schema will be tracked for changes."),(0,r.kt)("p",null,"After a bit of a refactoring our Initialization looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public async Task InitializeAsync()\n{\n    HttpClient = CreateClient();\n    _dbConnection = new NpgsqlConnection("Server=localhost;Port=5432;Database=mydb;User ID=workshop;Password=changeme;");\n    await InitializeRespawner();\n}\n\nprivate async Task InitializeRespawner()\n{\n    await _dbConnection.OpenAsync();\n    _respawner = await Respawner.CreateAsync(_dbConnection, new RespawnerOptions\n    {\n        DbAdapter = DbAdapter.Postgres,\n        SchemasToInclude = new[] { "public" }\n    });\n}\n')),(0,r.kt)("p",null,"The only thing left to do is to expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"ResetDatabaseAsync")," method for our tests to use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task ResetDatabaseAsync()\n{\n    await _respawner.ResetAsync(_dbConnection);\n}\n")),(0,r.kt)("p",null,"And that's it!"),(0,r.kt)("h2",{id:"using-reset-in-the-tests"},"Using reset in the tests"),(0,r.kt)("p",null,"Now we need three main things in our tests.\nFirst, we need to delete any ",(0,r.kt)("inlineCode",{parentName:"p"},"_idsToDelete")," functionality from our tests."),(0,r.kt)("p",null,"Then we need a reference to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ResetDatabaseAsync")," method so we can reset the database."),(0,r.kt)("p",null,"This can be done by creating a field of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<Task>")," in our class and pointing to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ResetDatabaseAsync")," method in the constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Collection("Shared collection")]\npublic class CustomerControllerTests : IAsyncLifetime\n{\n    private readonly HttpClient _client;\n    private readonly Func<Task> _resetDatabase;\n\n    public CustomerControllerTests(CustomerApiFactory customerApiFactory)\n    {\n        _client = customerApiFactory.HttpClient;\n        _resetDatabase = apiFactory.ResetDatabaseAsync;\n    }\n\n...\n')),(0,r.kt)("p",null,"The last thing left is to invoke this ",(0,r.kt)("inlineCode",{parentName:"p"},"_resetDatabase")," field from the ",(0,r.kt)("inlineCode",{parentName:"p"},"DisposeAsync")," method that should exist by implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"IAsyncLifetime")," interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Task DisposeAsync() => _resetDatabase();\n")),(0,r.kt)("p",null,"And that's it! All our tests now run sequentially and we no longer need to delete data manually. Respawn will do all that for us!"))}u.isMDXComponent=!0}}]);