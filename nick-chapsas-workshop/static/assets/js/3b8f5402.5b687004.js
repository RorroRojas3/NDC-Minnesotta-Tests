"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[6182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return n?s.createElement(d,a(a({ref:t},m),{},{components:n})):s.createElement(d,a({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var s=n(7462),r=(n(7294),n(3905));const o={description:"Let's see how we can implement smoke tests with k6"},a="Smoke testing",i={unversionedId:"performance-testing/smoke-testing",id:"performance-testing/smoke-testing",title:"Smoke testing",description:"Let's see how we can implement smoke tests with k6",source:"@site/docs/performance-testing/smoke-testing.md",sourceDirName:"performance-testing",slug:"/performance-testing/smoke-testing",permalink:"/performance-testing/smoke-testing",draft:!1,tags:[],version:"current",frontMatter:{description:"Let's see how we can implement smoke tests with k6"},sidebar:"docs",previous:{title:"Introduction to Performance Testing",permalink:"/performance-testing/intro-to-perf-testing"},next:{title:"Load testing",permalink:"/performance-testing/load-testing"}},l={},p=[{value:"Smoke testing the Customers API",id:"smoke-testing-the-customers-api",level:2},{value:"Thresholds",id:"thresholds",level:3},{value:"Checks",id:"checks",level:3},{value:"Running the test properly",id:"running-the-test-properly",level:3},{value:"Dealing with authentication",id:"dealing-with-authentication",level:2}],m={toc:p};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,s.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"smoke-testing"},"Smoke testing"),(0,r.kt)("h2",{id:"smoke-testing-the-customers-api"},"Smoke testing the Customers API"),(0,r.kt)("p",null,"Let's start by writing the simplest smoke test for the Customers API that we used during the Integration testing section."),(0,r.kt)("p",null,"Here is what the base for our k6 test looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport const options = {\n    vus: 1, \n    duration: '1m'\n};\n\nconst BASE_URL = 'https://localhost:5001';\n\nexport default () => {\n\n    sleep(1);\n};\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object we configure how we want our test to run. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"export default ()")," function we implement the code that interact with our service."),(0,r.kt)("p",null,"VUs stands for virtual users. In Smoke Tests we only want to work with 1-2 VUs."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep")," function accepts seconds as a parameter so in this specific test, the action will be performed by one virtual user who will be calling the API once every second. "),(0,r.kt)("p",null,"Now let's go ahead and implement a GET request against the ",(0,r.kt)("inlineCode",{parentName:"p"},"https://localhost:5001/customers")," endpoint that returns all customers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"export default () => {\n    http.get(`${BASE_URL}/customers/`);\n    sleep(1);\n};\n")),(0,r.kt)("p",null,"And that's it! Technically, this is enough to run a very basic smoke test."),(0,r.kt)("p",null,"Simply run the following command and wait for 1 minute for the test to complete."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"k6 run ./smoke-test.js\n")),(0,r.kt)("p",null,"The results should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   \u203e\u203e\\\n   /          \\   |  |\\  \\ |  (\u203e)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: ./smoke-test.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 1 max VUs, 1m30s max duration (incl. graceful stop):\n           * default: 1 looping VUs for 1m0s (gracefulStop: 30s)\n\nrunning (1m00.4s), 0/1 VUs, 60 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 1 VUs  1m0s\n\n     data_received..................: 20 kB  323 B/s\n     data_sent......................: 3.2 kB 53 B/s\n     http_req_blocked...............: avg=299.99\xb5s min=0s      med=0s       max=17.99ms p(90)=0s       p(95)=0s\n     http_req_connecting............: avg=0s       min=0s      med=0s       max=0s      p(90)=0s       p(95)=0s\n   \u2713 http_req_duration..............: avg=1.22ms   min=846.4\xb5s med=1.21ms   max=3.49ms  p(90)=1.4ms    p(95)=1.58ms\n       { expected_response:true }...: avg=1.22ms   min=846.4\xb5s med=1.21ms   max=3.49ms  p(90)=1.4ms    p(95)=1.58ms\n     http_req_failed................: 0.00%  \u2713 0        \u2717 60\n     http_req_receiving.............: avg=209.63\xb5s min=0s      med=272.3\xb5s  max=511\xb5s   p(90)=416.49\xb5s p(95)=470.86\xb5s\n     http_req_sending...............: avg=16.65\xb5s  min=0s      med=0s       max=999.3\xb5s p(90)=0s       p(95)=0s\n     http_req_tls_handshaking.......: avg=250.01\xb5s min=0s      med=0s       max=15ms    p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=1ms      min=831.9\xb5s med=949.75\xb5s max=2.49ms  p(90)=1ms      p(95)=1.42ms\n     http_reqs......................: 60     0.993349/s\n     iteration_duration.............: avg=1s       min=1s      med=1s       max=1.02s   p(90)=1s       p(95)=1s\n     iterations.....................: 60     0.993349/s\n     vus............................: 1      min=1      max=1\n     vus_max........................: 1      min=1      max=1\n")),(0,r.kt)("p",null,"This is what the the smoke testing load can be visualized as:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(8846).Z,width:"789",height:"259"})),(0,r.kt)("p",null,"Now even though this is a valid test technically, we aren't validating anything related to performance."),(0,r.kt)("p",null,"This is where thresholds and checks come in."),(0,r.kt)("h3",{id:"thresholds"},"Thresholds"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object we can specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"thresholds")," object.\nIn this object we can define limits that the tests should stay inside of to be considered a successful run."),(0,r.kt)("p",null,"For example if we wanted 99% of the requests to respond below 15 milliseconds, we should have a ",(0,r.kt)("inlineCode",{parentName:"p"},"thresholds")," object with the following value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"thresholds: {\n    http_req_duration: ['p(99)<15']\n}\n")),(0,r.kt)("p",null,"There are multiple types of thresholds that k6 supports, which can be found ",(0,r.kt)("a",{parentName:"p",href:"https://k6.io/docs/using-k6/thresholds/"},"here")),(0,r.kt)("h3",{id:"checks"},"Checks"),(0,r.kt)("p",null,"Checks is a way to validate that the data returned by the system we are testing is what we expect it to be.\nYou can think of them as assertions for our performance tests. For example, we have 1 customer in the database.\nI want to write a check that ensures that this one user is returned in every response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const customers = http.get(`${BASE_URL}/customers/`).json();\ncheck(customers, { 'retrieved customers': (obj) => obj.customers.length > 0 });\n")),(0,r.kt)("h3",{id:"running-the-test-properly"},"Running the test properly"),(0,r.kt)("p",null,"This is our complete smoke test code now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="smoke-test.js"',title:'"smoke-test.js"'},"import http from 'k6/http';\nimport { check, sleep} from 'k6';\n\nexport const options = {\n    vus: 1,\n    duration: '1m',\n\n    thresholds: {\n        http_req_duration: ['p(99)<15'], \n    },\n};\n\nconst BASE_URL = 'https://localhost:5001';\n\nexport default () => {\n    const customers = http.get(`${BASE_URL}/customers/`).json();\n    check(customers, { 'retrieved customers': (obj) => obj.customers.length > 0 });\n    sleep(1);\n};\n")),(0,r.kt)("p",null,"And these are the results its producing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-commandline"},"          /\\      |\u203e\u203e| /\u203e\u203e/   /\u203e\u203e/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   \u203e\u203e\\\n   /          \\   |  |\\  \\ |  (\u203e)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\n\n  execution: local\n     script: ./smoke-test.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 1 max VUs, 1m30s max duration (incl. graceful stop):\n           * default: 1 looping VUs for 1m0s (gracefulStop: 30s)\n           \nrunning (1m00.5s), 0/1 VUs, 60 complete and 0 interrupted iterations\ndefault \u2713 [======================================] 1 VUs  1m0s\n\n     \u2713 retrieved customers\n\n     checks.........................: 100.00% \u2713 60       \u2717 0\n     data_received..................: 20 kB   322 B/s\n     data_sent......................: 3.2 kB  53 B/s\n     http_req_blocked...............: avg=300\xb5s    min=0s      med=0s      max=18ms    p(90)=0s       p(95)=0s\n     http_req_connecting............: avg=8.33\xb5s   min=0s      med=0s      max=500\xb5s   p(90)=0s       p(95)=0s\n   \u2713 http_req_duration..............: avg=1.22ms   min=853.8\xb5s med=1.25ms  max=1.53ms  p(90)=1.46ms   p(95)=1.5ms\n       { expected_response:true }...: avg=1.22ms   min=853.8\xb5s med=1.25ms  max=1.53ms  p(90)=1.46ms   p(95)=1.5ms\n     http_req_failed................: 0.00%   \u2713 0        \u2717 60\n     http_req_receiving.............: avg=214.4\xb5s  min=0s      med=278.2\xb5s max=505\xb5s   p(90)=433.07\xb5s p(95)=467.66\xb5s\n     http_req_sending...............: avg=8.33\xb5s   min=0s      med=0s      max=500.1\xb5s p(90)=0s       p(95)=0s\n     http_req_tls_handshaking.......: avg=241.66\xb5s min=0s      med=0s      max=14.5ms  p(90)=0s       p(95)=0s\n     http_req_waiting...............: avg=999.67\xb5s min=853.1\xb5s med=999.7\xb5s max=1.5ms   p(90)=1ms      p(95)=1.38ms\n     http_reqs......................: 60      0.992178/s\n     iteration_duration.............: avg=1s       min=1s      med=1s      max=1.03s   p(90)=1s       p(95)=1s\n     iterations.....................: 60      0.992178/s\n     vus............................: 1       min=1      max=1\n     vus_max........................: 1       min=1      max=1\n")),(0,r.kt)("h2",{id:"dealing-with-authentication"},"Dealing with authentication"),(0,r.kt)("p",null,"Most systems require the users to be authenticated before they can make actions.\nSince the performance tests run from the perspective of users, they also need to be authenticated."),(0,r.kt)("p",null,"This is something we need to do as part of the main test function. "),(0,r.kt)("p",null,"So for example if we needed to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"/auth/token/login")," endpoint, pass down some credentials, check that the response was successful,\nand then use the returned access token to our API request, it could look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export default () => {\n    const loginRes = http.post(`${BASE_URL}/auth/token/login/`, {\n        username: \"nick\",\n        password: \"SecretPass69\",\n    });\n\n    check(loginRes, {\n        'logged in successfully': (resp) => resp.json('access') !== '',\n    });\n\n    const authHeaders = {\n        headers: {\n            Authorization: `Bearer ${loginRes.json('access')}`,\n        },\n    };\n    \n    \n    const customers = http.get(`${BASE_URL}/customers/`, authHeaders).json();\n    check(customers, { 'retrieved customers': (obj) => obj.customers.length > 0 });\n    sleep(1);\n};\n")),(0,r.kt)("p",null,"Since authentication has so many different flavours, it is up to you to script it out for each individual scenario."),(0,r.kt)("p",null,"And that's it! Assuming that you see no errors, your system is robust enough to go to the next step, Load Testing."))}c.isMDXComponent=!0},8846:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/smoke-test-20818dac433d635eff87c2e3027250fd.jpg"}}]);