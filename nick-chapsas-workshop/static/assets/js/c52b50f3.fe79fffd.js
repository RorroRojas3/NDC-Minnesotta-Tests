"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[6664],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),g=a,h=d["".concat(l,".").concat(g)]||d[g]||p[g]||s;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2040:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const s={description:"The holy trinity of unit test structure"},o="Arrange, Act, Assert",i={unversionedId:"unit-testing/getting-started/arrange-act-assert",id:"unit-testing/getting-started/arrange-act-assert",title:"Arrange, Act, Assert",description:"The holy trinity of unit test structure",source:"@site/docs/unit-testing/getting-started/arrange-act-assert.md",sourceDirName:"unit-testing/getting-started",slug:"/unit-testing/getting-started/arrange-act-assert",permalink:"/unit-testing/getting-started/arrange-act-assert",draft:!1,tags:[],version:"current",frontMatter:{description:"The holy trinity of unit test structure"},sidebar:"docs",previous:{title:"Let's improve our test",permalink:"/unit-testing/getting-started/lets-improve"},next:{title:"Exercise: Test the calculator",permalink:"/unit-testing/getting-started/calculator-exercise"}},l={},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"arrange-act-assert"},"Arrange, Act, Assert"),(0,a.kt)("p",null,"So here is where we left off"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IntCalculatorTests.cs"',title:'"IntCalculatorTests.cs"'},"[Fact]\npublic void Add_ShouldAddTwoNumbers_WhenBothOfThemArePositiveIntegers()\n{\n    var sut = new IntCalculator();\n\n    var result = sut.Add(1, 2);\n    \n    result.Should().Be(3);\n}\n")),(0,a.kt)("p",null,"This is a good structure for a test and as you can probably see is loosely has 3 distinct levels."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'The "setup" level were we create some data that we will use in our test'),(0,a.kt)("li",{parentName:"ol"},'The "action" level were we are using the method we are testing to get a result'),(0,a.kt)("li",{parentName:"ol"},'The "assertion" level were we ensure that the result data matches what we expect')),(0,a.kt)("p",null,"Every test, with only a few exceptions, will have all three level. "),(0,a.kt)("p",null,"These levels have come to be known as Arrange, Act, Assert and it is a common practice to add a comment with each respective word in the test to show where one starts and where it ends."),(0,a.kt)("p",null,"With that in mind our test now looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="IntCalculatorTests.cs"',title:'"IntCalculatorTests.cs"'},"[Fact]\npublic void Add_ShouldAddTwoNumbers_WhenBothOfThemArePositiveIntegers()\n{\n    // Arrange\n    var sut = new IntCalculator();\n\n    // Act\n    var result = sut.Add(1, 2);\n    \n    // Assert\n    result.Should().Be(3);\n}\n")),(0,a.kt)("p",null,"Every test we will write from now on will follow this structure."))}p.isMDXComponent=!0}}]);