"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[8818],{3905:(t,e,r)=>{r.d(e,{Zo:()=>l,kt:()=>f});var n=r(7294);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var u=n.createContext({}),c=function(t){var e=n.useContext(u),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},l=function(t){var e=c(t.components);return n.createElement(u.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,i=t.mdxType,a=t.originalType,u=t.parentName,l=o(t,["components","mdxType","originalType","parentName"]),d=c(r),f=i,m=d["".concat(u,".").concat(f)]||d[f]||p[f]||a;return r?n.createElement(m,s(s({ref:e},l),{},{components:r})):n.createElement(m,s({ref:e},l))}));function f(t,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=r.length,s=new Array(a);s[0]=d;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:i,s[1]=o;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9807:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={description:"Time for us to write our first unit tests"},s="Your first test(s)",o={unversionedId:"unit-testing/getting-started/your-first-test",id:"unit-testing/getting-started/your-first-test",title:"Your first test(s)",description:"Time for us to write our first unit tests",source:"@site/docs/unit-testing/getting-started/your-first-test.md",sourceDirName:"unit-testing/getting-started",slug:"/unit-testing/getting-started/your-first-test",permalink:"/unit-testing/getting-started/your-first-test",draft:!1,tags:[],version:"current",frontMatter:{description:"Time for us to write our first unit tests"},sidebar:"docs",previous:{title:"Creating the test project",permalink:"/unit-testing/getting-started/creating-test-project"},next:{title:"Structuring our solution",permalink:"/unit-testing/getting-started/solution-structure"}},u={},c=[{value:"The simplest usecase",id:"the-simplest-usecase",level:2},{value:"The naive but perfectly valid approach",id:"the-naive-but-perfectly-valid-approach",level:2}],l={toc:c};function p(t){let{components:e,...r}=t;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"your-first-tests"},"Your first test(s)"),(0,i.kt)("h2",{id:"the-simplest-usecase"},"The simplest usecase"),(0,i.kt)("p",null,"It's time for you to write your first test \ud83e\udd73 "),(0,i.kt)("p",null,"The test case we want to test for is that when two positive integers are added then the expected result is returned."),(0,i.kt)("h2",{id:"the-naive-but-perfectly-valid-approach"},"The naive but perfectly valid approach"),(0,i.kt)("p",null,"First we need to create our test method.\nIn that method we will write code that matches the above case."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Tests.cs"',title:'"Tests.cs"'},'[Fact]\npublic void Test()\n{\n    var result = new IntCalculator().Add(1, 2);\n    if(result != 3)\n    {\n        throw new Exception("Result wasn\'t 3");\n    }\n}\n')),(0,i.kt)("p",null,"This is a perfectly valid test. "),(0,i.kt)("p",null,"We are creating an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"IntCalculator"),", we are invoking the ",(0,i.kt)("inlineCode",{parentName:"p"},"Add")," method with appropriate parameters and then we check if the value is what we expected and if it isn't then we throw an exception."),(0,i.kt)("p",null,"There are however tools and practices that make the code above more readable and maintainable."),(0,i.kt)("p",null,"Let's start from top to bottom."))}p.isMDXComponent=!0}}]);