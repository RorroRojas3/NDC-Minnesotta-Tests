"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[6543],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=s.createContext({}),l=function(e){var t=s.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||a;return n?s.createElement(h,o(o({ref:t},c),{},{components:n})):s.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=n(7462),r=(n(7294),n(3905));const a={description:"Time for you to practice by writing the rest of the tests"},o="Writing the rest of the tests",i={unversionedId:"integration-testing/api/write-the-tests",id:"integration-testing/api/write-the-tests",title:"Writing the rest of the tests",description:"Time for you to practice by writing the rest of the tests",source:"@site/docs/integration-testing/api/write-the-tests.md",sourceDirName:"integration-testing/api",slug:"/integration-testing/api/write-the-tests",permalink:"/integration-testing/api/write-the-tests",draft:!1,tags:[],version:"current",frontMatter:{description:"Time for you to practice by writing the rest of the tests"},sidebar:"docs",previous:{title:"Running the API smarter",permalink:"/integration-testing/api/using-waf"},next:{title:"Our own WebApplicationFactory",permalink:"/integration-testing/api/our-own-waf"}},u={},l=[{value:"Testing that some data exists",id:"testing-that-some-data-exists",level:2},{value:"Exercise: Write the following tests",id:"exercise-write-the-following-tests",level:2},{value:"Solutions",id:"solutions",level:3}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"writing-the-rest-of-the-tests"},"Writing the rest of the tests"),(0,r.kt)("p",null,"With all that said, let's write our second test and then hand it over to you to write the rest of them."),(0,r.kt)("h2",{id:"testing-that-some-data-exists"},"Testing that some data exists"),(0,r.kt)("p",null,"The second test we need to write is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Get_ShouldReturnCustomer_WhenCustomerExists"),".\nFor this test we need to create a customer as part of ",(0,r.kt)("inlineCode",{parentName:"p"},"Arrange"),", try to retrieve them as part of ",(0,r.kt)("inlineCode",{parentName:"p"},"Act")," and then validate that they are returned in the response in ",(0,r.kt)("inlineCode",{parentName:"p"},"Assert"),".\nWe also have to add the customer id in the list so it can get deleted."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Get_ShouldReturnCustomer_WhenCustomerExists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Get_ShouldReturnCustomer_WhenCustomerExists()\n{\n    // Arrange\n    var request = new CustomerRequest\n    {\n        Email = "nick@chapsas.com",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n\n    var createCustomerHttpResponse = await _client.PostAsJsonAsync("customers", request);\n    var createdCustomer = await createCustomerHttpResponse.Content.ReadFromJsonAsync<CustomerResponse>();\n\n    // Act\n    var response = await _client.GetAsync($"customers/{createdCustomer!.Id}");\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\n    var customerResponse = await response.Content.ReadFromJsonAsync<CustomerResponse>();\n\n    customerResponse.Should().BeEquivalentTo(createdCustomer);\n    \n    // Cleanup\n    _idsToDelete.Add(customerResponse!.Id);\n}\n'))),(0,r.kt)("h2",{id:"exercise-write-the-following-tests"},"Exercise: Write the following tests"),(0,r.kt)("p",null,"The tests we need are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Create_ShouldReturnBadRequest_WhenTheEmailIsInvalid")," (The object used for bad requests is ",(0,r.kt)("inlineCode",{parentName:"li"},"ValidationProblemDetails"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetAll_ShouldReturnAllCustomers_WhenCustomersExist")," (One customer is enough. The object used is ",(0,r.kt)("inlineCode",{parentName:"li"},"GetAllCustomersResponse"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Get_ShouldReturnNotFound_WhenCustomerDoesNotExist")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Update_ShouldUpdateCustomerDetails_WhenDetailsAreValid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Delete_ShouldDeleteCustomer_WhenCustomerExists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Delete_ShouldReturnNotFound_WhenCustomerDoesNotExist"))),(0,r.kt)("h3",{id:"solutions"},"Solutions"),(0,r.kt)("p",null,"Only expand the solutions if you are stuck. You are ",(0,r.kt)("strong",{parentName:"p"},"highly encouraged")," to try and write the tests yourself.\nPractice makes perfect and you only learn by doing."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Create_ShouldReturnBadRequest_WhenTheEmailIsInvalid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Create_ShouldReturnBadRequest_WhenTheEmailIsInvalid()\n{\n    // Arrange\n    var request = new CustomerRequest\n    {\n        Email = "nick",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n\n    // Act\n    var response = await _client.PostAsJsonAsync("customers", request);\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n    var problemDetails = await response.Content.ReadFromJsonAsync<ValidationProblemDetails>();\n    problemDetails!.Errors["Email"].Should().Equal("nick is not a valid email address");\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"GetAll_ShouldReturnAllCustomers_WhenCustomersExist"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task GetAll_ShouldReturnAllCustomers_WhenCustomersExist()\n{\n    // Arrange\n    var request = new CustomerRequest\n    {\n        Email = "nick@chapsas.com",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n    \n    var createCustomerHttpResponse = await _client.PostAsJsonAsync("customers", request);\n    var createdCustomer = await createCustomerHttpResponse.Content.ReadFromJsonAsync<CustomerResponse>();\n    _idsToDelete.Add(createdCustomer!.Id);\n\n    // Act\n    var response = await _client.GetAsync("customers");\n\n    // Assert\n    var customerResponse = await response.Content.ReadFromJsonAsync<GetAllCustomersResponse>();\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\n    customerResponse!.Customers.Should().ContainEquivalentOf(createdCustomer).And.HaveCount(1);\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Get_ShouldReturnNotFound_WhenCustomerDoesNotExist"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Get_ShouldReturnNotFound_WhenCustomerDoesNotExist()\n{\n    // Arrange\n    var customerId = Guid.NewGuid();\n\n    // Act\n    var response = await _client.GetAsync($"customers/{customerId}");\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Update_ShouldUpdateCustomerDetails_WhenDetailsAreValid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Update_ShouldUpdateCustomerDetails_WhenDetailsAreValid()\n{\n    // Arrange\n    var createRequest = new CustomerRequest\n    {\n        Email = "nick@chapsas.com",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n    \n    var createCustomerHttpResponse = await _client.PostAsJsonAsync("customers", createRequest);\n    var createdCustomer = await createCustomerHttpResponse.Content.ReadFromJsonAsync<CustomerResponse>();\n    _idsToDelete.Add(createdCustomer!.Id);\n    \n    var updateRequest = new CustomerRequest\n    {\n        Email = "chapsas@nick.com",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n\n    // Act\n    var response = await _client.PutAsJsonAsync($"customers/{createdCustomer!.Id}", updateRequest);\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.OK);    \n    var customerResponse = await response.Content.ReadFromJsonAsync<CustomerResponse>();\n    customerResponse.Should().BeEquivalentTo(updateRequest);\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Delete_ShouldDeleteCustomer_WhenCustomerExists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Delete_ShouldDeleteCustomer_WhenCustomerExists()\n{\n    // Arrange\n    var createRequest = new CustomerRequest\n    {\n        Email = "nick@chapsas.com",\n        FullName = "Nick Chapsas",\n        DateOfBirth = new DateTime(1993, 01, 01),\n        GitHubUsername = "nickchapsas"\n    };\n    \n    var createCustomerHttpResponse = await _client.PostAsJsonAsync("customers", createRequest);\n    var createdCustomer = await createCustomerHttpResponse.Content.ReadFromJsonAsync<CustomerResponse>();\n\n    // Act\n    var response = await _client.DeleteAsync($"customers/{createdCustomer!.Id}");\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.OK);\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Delete_ShouldReturnNotFound_WhenCustomerDoesNotExist"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Fact]\npublic async Task Delete_ShouldReturnNotFound_WhenCustomerDoesNotExist()\n{\n    // Arrange\n    var customerId = Guid.NewGuid();\n\n    // Act\n    var response = await _client.DeleteAsync($"customers/{customerId}");\n\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.NotFound);\n}\n'))))}p.isMDXComponent=!0}}]);