"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[5571],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(r),m=l,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(h,u(u({ref:t},c),{},{components:r})):n.createElement(h,u({ref:t},c))}));function m(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,u=new Array(a);u[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,u[1]=i;for(var s=2;s<a;s++)u[s]=r[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4901:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),l=(r(7294),r(3905));const a={description:"Your turn to write the rest of the tests"},u="Exercise: Test the calculator",i={unversionedId:"unit-testing/getting-started/calculator-exercise",id:"unit-testing/getting-started/calculator-exercise",title:"Exercise: Test the calculator",description:"Your turn to write the rest of the tests",source:"@site/docs/unit-testing/getting-started/calculator-exercise.md",sourceDirName:"unit-testing/getting-started",slug:"/unit-testing/getting-started/calculator-exercise",permalink:"/unit-testing/getting-started/calculator-exercise",draft:!1,tags:[],version:"current",frontMatter:{description:"Your turn to write the rest of the tests"},sidebar:"docs",previous:{title:"Arrange, Act, Assert",permalink:"/unit-testing/getting-started/arrange-act-assert"},next:{title:"One test, multiple test cases",permalink:"/unit-testing/getting-started/multiple-test-params"}},o={},s=[{value:"The test cases",id:"the-test-cases",level:2},{value:"Solutions",id:"solutions",level:2}],c={toc:s};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"exercise-test-the-calculator"},"Exercise: Test the calculator"),(0,l.kt)("p",null,"Let's get our hands dirty. It is now your turn to apply what we learned until now."),(0,l.kt)("h2",{id:"the-test-cases"},"The test cases"),(0,l.kt)("p",null,"Here are a few test case names that I would like to to write the test for."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Add_ShouldReturnZero_WhenAnOppositePositiveAndNegativeNumberAreAdded")," | Example: -5 + 5 = 0"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Subtract_ShouldSubtractTwoNumbers_WhenTheNumbersAreIntegers")," | Example: 7 - 5 = 2"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Multiply_ShouldMultiplyTwoNumbers_WhenTheNumbersArePositiveIntegers")," | Example: 6 * 9 = 54"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Multiply_ShouldReturnZero_WhenOneOfTheNumbersIsZero")," | Example: 7 * 0 = 0"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Divide_ShouldDivideTwoNumbers_WhenNumbersAreDivisible")," | Example: 10 / 2 = 5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Divide_ShouldReturnTheFirstNumber_WhenNumberIsDividedByOne")," | Example: 7 / 1 = 7")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Feel free to call me over to give you a hand \ud83e\udd1a")),(0,l.kt)("h2",{id:"solutions"},"Solutions"),(0,l.kt)("p",null,"You can expand any individual block to see my solution to each exercise. You are still strongly advised to try and write the methods yourself.  "),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Add_ShouldReturnZero_WhenAnOppositePositiveAndNegativeNumberAreAdded"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Add_ShouldReturnZero_WhenAnOppositePositiveAndNegativeNumberAreAdded()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Add(5, -5);\n    \n    // Assert\n    result.Should().Be(0);\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Subtract_ShouldSubtractTwoNumbers_WhenTheNumbersAreIntegers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Subtract_ShouldSubtractTwoNumbers_WhenTheNumbersAreIntegers()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Subtract(7, 5);\n\n    // Assert\n    result.Should().Be(2);\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Multiply_ShouldMultiplyTwoNumbers_WhenTheNumbersArePositiveIntegers"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Multiply_ShouldMultiplyTwoNumbers_WhenTheNumbersArePositiveIntegers()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Multiply(6, 9);\n    \n    // Assert\n    result.Should().Be(54);\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Multiply_ShouldReturnZero_WhenOneOfTheNumbersIsZero"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Multiply_ShouldReturnZero_WhenOneOfTheNumbersIsZero()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Multiply(7, 0);\n    \n    // Assert\n    result.Should().Be(0);\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Divide_ShouldDivideTwoNumbers_WhenNumbersAreDivisible"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Divide_ShouldDivideTwoNumbers_WhenNumbersAreDivisible()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Divide(10, 2);\n    \n    // Assert\n    result.Should().Be(5);\n}\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Divide_ShouldReturnTheFirstNumber_WhenNumberIsDividedByOne"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"[Fact]\npublic void Divide_ShouldReturnTheFirstNumber_WhenNumberIsDividedByOne()\n{\n    // Arrange\n    var calculator = new IntCalculator();\n\n    // Act\n    var result = calculator.Divide(7, 1);\n    \n    // Assert\n    result.Should().Be(7);\n}\n"))))}d.isMDXComponent=!0}}]);