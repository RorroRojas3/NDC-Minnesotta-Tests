"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[79],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=i.createContext({}),s=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),h=s(n),c=l,p=h["".concat(d,".").concat(c)]||h[c]||m[c]||r;return n?i.createElement(p,a(a({ref:t},u),{},{components:n})):i.createElement(p,a({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,a=new Array(r);a[0]=h;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var s=2;s<r;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7462),l=(n(7294),n(3905));const r={description:"Practice makes perfect. Let's give TDD a go"},a="Let's practice TDD",o={unversionedId:"unit-testing/tdd/an-example",id:"unit-testing/tdd/an-example",title:"Let's practice TDD",description:"Practice makes perfect. Let's give TDD a go",source:"@site/docs/unit-testing/tdd/an-example.md",sourceDirName:"unit-testing/tdd",slug:"/unit-testing/tdd/an-example",permalink:"/unit-testing/tdd/an-example",draft:!1,tags:[],version:"current",frontMatter:{description:"Practice makes perfect. Let's give TDD a go"},sidebar:"docs",previous:{title:"Introduction to TDD",permalink:"/unit-testing/tdd/tdd-intro"},next:{title:"Code coverage",permalink:"/unit-testing/deep-dive/code-coverage"}},d={},s=[{value:"The String Calculator Kata",id:"the-string-calculator-kata",level:2},{value:"1. Create a simple String calculator with the following method signature",id:"1-create-a-simple-string-calculator-with-the-following-method-signature",level:3},{value:"2. Allow the <code>Add</code> method to handle an unknown amount of numbers",id:"2-allow-the-add-method-to-handle-an-unknown-amount-of-numbers",level:3},{value:"3. Allow the <code>Add</code> method to handle new lines between numbers (on top of commas)",id:"3-allow-the-add-method-to-handle-new-lines-between-numbers-on-top-of-commas",level:3},{value:"4. Support different delimiters",id:"4-support-different-delimiters",level:3},{value:"5. Calling <code>Add</code> with a negative number will throw a <code>NegativesNotAllowedException</code> with the negative number(s) in the message.",id:"5-calling-add-with-a-negative-number-will-throw-a-negativesnotallowedexception-with-the-negative-numbers-in-the-message",level:3},{value:"6. Numbers bigger than 1000 should be ignored, so adding 2 + 1001 = 2",id:"6-numbers-bigger-than-1000-should-be-ignored-so-adding-2--1001--2",level:3},{value:"7. Delimiters can be of any length with the following format: <code>//[delimiter]\n</code> for example <code>//[***]\n1***2***3</code> should return 6",id:"7-delimiters-can-be-of-any-length-with-the-following-format-delimitern-for-example-n123-should-return-6",level:3},{value:"8. Allow multiple delimiters like this: <code>//[delim1][delim2]\n</code> for example <code>//[*][%]\n1*2%3</code> should return 6.",id:"8-allow-multiple-delimiters-like-this-delim1delim2n-for-example-n123-should-return-6",level:3},{value:"9. Make sure you can also handle multiple delimiters with length longer than one char",id:"9-make-sure-you-can-also-handle-multiple-delimiters-with-length-longer-than-one-char",level:3}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"lets-practice-tdd"},"Let's practice TDD"),(0,l.kt)("p",null,"Let's write some code using TDD. We will do that using a ",(0,l.kt)("em",{parentName:"p"},"Code kata"),". Katas are exercises that allow us to practice coding practices to get better at applying them and using them."),(0,l.kt)("p",null,"The one we will use in this case is the ",(0,l.kt)("strong",{parentName:"p"},"String Calculator")," Kata."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Each section includes the answer to the exercise but only reveal if you are stuck. Practice makes perfect so give it a go.")),(0,l.kt)("h2",{id:"the-string-calculator-kata"},"The String Calculator Kata"),(0,l.kt)("h3",{id:"1-create-a-simple-string-calculator-with-the-following-method-signature"},"1. Create a simple String calculator with the following method signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"int Add(string numbers)\n")),(0,l.kt)("p",null,"The method can take up to two numbers, separated by commas, and will return their sum.\nFor example ",(0,l.kt)("inlineCode",{parentName:"p"},"<empty-string>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"1,2")," as inputs. (For an empty string it should return 0)"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"2-allow-the-add-method-to-handle-an-unknown-amount-of-numbers"},"2. Allow the ",(0,l.kt)("inlineCode",{parentName:"h3"},"Add")," method to handle an unknown amount of numbers"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"3-allow-the-add-method-to-handle-new-lines-between-numbers-on-top-of-commas"},"3. Allow the ",(0,l.kt)("inlineCode",{parentName:"h3"},"Add")," method to handle new lines between numbers (on top of commas)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The following input is ok: ",(0,l.kt)("inlineCode",{parentName:"li"},"1\\n2,3")," (will equal 6)"),(0,l.kt)("li",{parentName:"ul"},"The following input is NOT ok: ",(0,l.kt)("inlineCode",{parentName:"li"},"1,\\n")," (no need to prove it - just clarifying)")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"4-support-different-delimiters"},"4. Support different delimiters"),(0,l.kt)("p",null,"To change the default delimiter, the beginning of the string will contain a separate like that looks like this: ",(0,l.kt)("inlineCode",{parentName:"p"},"//[delimiter]\\n[numbers\u2026]"),"."),(0,l.kt)("p",null,"For example ",(0,l.kt)("inlineCode",{parentName:"p"},"//;\\n1;2")," should return ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," where the default delimiter is ",(0,l.kt)("inlineCode",{parentName:"p"},";"),".\nThe first line is optional and its absence should still default to ",(0,l.kt)("inlineCode",{parentName:"p"},","),". All existing scenarios should still be supported."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"5-calling-add-with-a-negative-number-will-throw-a-negativesnotallowedexception-with-the-negative-numbers-in-the-message"},"5. Calling ",(0,l.kt)("inlineCode",{parentName:"h3"},"Add")," with a negative number will throw a ",(0,l.kt)("inlineCode",{parentName:"h3"},"NegativesNotAllowedException")," with the negative number(s) in the message."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"6-numbers-bigger-than-1000-should-be-ignored-so-adding-2--1001--2"},"6. Numbers bigger than 1000 should be ignored, so adding 2 + 1001 = 2"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"7-delimiters-can-be-of-any-length-with-the-following-format-delimitern-for-example-n123-should-return-6"},"7. Delimiters can be of any length with the following format: ",(0,l.kt)("inlineCode",{parentName:"h3"},"//[delimiter]\\n")," for example ",(0,l.kt)("inlineCode",{parentName:"h3"},"//[***]\\n1***2***3")," should return 6"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"8-allow-multiple-delimiters-like-this-delim1delim2n-for-example-n123-should-return-6"},"8. Allow multiple delimiters like this: ",(0,l.kt)("inlineCode",{parentName:"h3"},"//[delim1][delim2]\\n")," for example ",(0,l.kt)("inlineCode",{parentName:"h3"},"//[*][%]\\n1*2%3")," should return 6."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"9-make-sure-you-can-also-handle-multiple-delimiters-with-length-longer-than-one-char"},"9. Make sure you can also handle multiple delimiters with length longer than one char"))}m.isMDXComponent=!0}}]);