"use strict";(self.webpackChunktesting_workshop=self.webpackChunktesting_workshop||[]).push([[4493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,g=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8537:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={description:"Let's use what we've learned to write our first UI integration test"},i="Our first UI integration test",o={unversionedId:"integration-testing/ui/first-integration-test",id:"integration-testing/ui/first-integration-test",title:"Our first UI integration test",description:"Let's use what we've learned to write our first UI integration test",source:"@site/docs/integration-testing/ui/first-integration-test.md",sourceDirName:"integration-testing/ui",slug:"/integration-testing/ui/first-integration-test",permalink:"/integration-testing/ui/first-integration-test",draft:!1,tags:[],version:"current",frontMatter:{description:"Let's use what we've learned to write our first UI integration test"},sidebar:"docs",previous:{title:"Introduction to Browser testing",permalink:"/integration-testing/ui/browser-testing"},next:{title:"Exercise: The rest of the tests",permalink:"/integration-testing/ui/more-tests"}},l={},c=[{value:"Folder and file structure",id:"folder-and-file-structure",level:2},{value:"First test: Creating a customer",id:"first-test-creating-a-customer",level:2},{value:"InitializeAsync",id:"initializeasync",level:3},{value:"Arrange",id:"arrange",level:3},{value:"Act",id:"act",level:3},{value:"Assert",id:"assert",level:3},{value:"DisposeAsync",id:"disposeasync",level:3},{value:"Using Bogus",id:"using-bogus",level:2}],p={toc:c};function u(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"our-first-ui-integration-test"},"Our first UI integration test"),(0,r.kt)("p",null,"Now that we have all the tools we need, let's start writing integration tests"),(0,r.kt)("h2",{id:"folder-and-file-structure"},"Folder and file structure"),(0,r.kt)("p",null,"First let's create a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"Pages")," and a folder ",(0,r.kt)("inlineCode",{parentName:"p"},"Customer")," inside that folder.\nThis is done to mirror the folder structure of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Customers.WebApp")," project and help us see at a glance what's being tested."),(0,r.kt)("p",null,"Our tests will be separated in classes just like our pages, but due to the collection definition in xUnit, they will all share their context."),(0,r.kt)("h2",{id:"first-test-creating-a-customer"},"First test: Creating a customer"),(0,r.kt)("p",null,"Our first test will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Create_ShouldCreateCustomer_WhenDataIsValid")," and it will follow the same method structure as all of our other tests."),(0,r.kt)("p",null,"We first need to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddCustomerTests.cs")," class in which the tests will live."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="AddCustomerTests.cs"',title:'"AddCustomerTests.cs"'},'[Collection("Test collection")]\npublic class AddCustomerTests\n{\n    private readonly TestingContext _testingContext;\n    \n    public AddCustomerTests(TestingContext testingContext)\n    {\n        _testingContext = testingContext;\n    }\n}\n')),(0,r.kt)("p",null,"And then create the main structure for the test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="AddCustomerTests.cs"',title:'"AddCustomerTests.cs"'},"[Fact]\npublic async Task Create_ShouldCreateCustomer_WhenDataIsValid()\n{\n    // Arrange\n\n    // Act\n\n    // Assert\n    \n}\n")),(0,r.kt)("p",null,"Before we start implementing the main sections we need to implement what lives outside of the test."),(0,r.kt)("h3",{id:"initializeasync"},"InitializeAsync"),(0,r.kt)("p",null,"Before a test runs we need to create a browser page. We need to do this outside of the main test code because\nwe will be closing the page after the test and we don't want it to stay open if a test fails."),(0,r.kt)("p",null,"First let's implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"IAsyncLifetime")," interface and add the page creation code in ",(0,r.kt)("inlineCode",{parentName:"p"},"InitializeAsync"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"private IPage _page = default!;\n\npublic async Task InitializeAsync()\n{\n    _page = await _testingContext.Browser.NewPageAsync();\n}\n")),(0,r.kt)("h3",{id:"arrange"},"Arrange"),(0,r.kt)("p",null,"In the Arrange section we need to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new Playwright browser page and navigate to the right page"),(0,r.kt)("li",{parentName:"ul"},"Create any data we need by calling the database directly or using the interface"),(0,r.kt)("li",{parentName:"ul"},"Setup any request or expected data objects"),(0,r.kt)("li",{parentName:"ul"},"Setup the fake GitHub API user")),(0,r.kt)("p",null,"First let's create the new page and navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"/add-customer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var page = await _testingContext.Browser.NewPageAsync();\nawait page.GotoAsync($"{TestingContext.AppUrl}/add-customer");\n\n_testingContext.GitHubApiServer.SetupUser("nickchapsas");\n')),(0,r.kt)("h3",{id:"act"},"Act"),(0,r.kt)("p",null,"In the Act section we will make all the actions needed in the page to make the thing that the test is testing for, happen.\nIn this specific case we will fill in all the data and click the submit button."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We will use the exact same code we used in the previous section")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="AddCustomerTests.cs"',title:'"AddCustomerTests.cs"'},'await page.Locator("id=fullname").FillAsync(customer.FullName);\nawait page.Locator("id=email").FillAsync(customer.Email);\nawait page.Locator("id=github-username").FillAsync(customer.GitHubUsername);\nawait page.Locator("id=dob").FillAsync(customer.DateOfBirth.ToString("yyyy-MM-dd"));\nawait page.Locator("text=Submit").ClickAsync();\n')),(0,r.kt)("h3",{id:"assert"},"Assert"),(0,r.kt)("p",null,'There are a couple of ways to assert that the action happened successfully.\nWe can either navigate the listing page or the "get by id" page and validate the data there.\nHowever this might not always be possible, so creating a database connection, querying for the data and asserting the results is also a viable alternative.'),(0,r.kt)("p",null,"Let's go back to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TestingContext")," and add setup the ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbConnectionFactory")," needed to create the database connection."),(0,r.kt)("p",null,"First let's add the ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbConnectionFactory")," as a property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public IDbConnectionFactory Database { get; private set; }\n")),(0,r.kt)("p",null,"And then let's initialize a connection in the ",(0,r.kt)("inlineCode",{parentName:"p"},"InitializeAsync")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public async Task InitializeAsync()\n{\n    // highlight-start\n    Database = new NpgsqlConnectionFactory(\n        "Server=localhost;Port=5435;Database=mydb;User ID=workshop;Password=changeme;");\n    // highlight-end\n    \n    GitHubApiServer.Start(9850);\n    _dockerService.Start();\n \n    _playwright = await Playwright.CreateAsync();\n    var browser = await _playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions\n    {\n        SlowMo = 1000,\n        Headless = false\n    });\n    \n    Browser = await browser.NewContextAsync(new BrowserNewContextOptions\n    {\n        IgnoreHTTPSErrors = true\n    });\n}\n')),(0,r.kt)("p",null,"Now we have two options. We either write the raw queries using ",(0,r.kt)("inlineCode",{parentName:"p"},"Dapper")," and map the results to the ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomerDto")," and validate against that\nor we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomerRepository")," that already exists in the Web App project and use that to make all our database actions."),(0,r.kt)("p",null,"The pragmatic approach here is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomerRepository")," but you can follow whichever approach you want in this case."),(0,r.kt)("p",null,"Let's go ahead and add a field of type ",(0,r.kt)("inlineCode",{parentName:"p"},"ICustomerRepository")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddCustomerTests")," class and initialize it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbConnectionFactory"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"private readonly TestingContext _testingContext;\n// highlight-next-line\nprivate readonly ICustomerRepository _customerRepository;\n\npublic AddCustomerTests(TestingContext testingContext)\n{\n    _testingContext = testingContext;\n    // highlight-next-line\n    _customerRepository = new CustomerRepository(_testingContext.Database);\n}\n")),(0,r.kt)("p",null,"We can now use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAsync")," method to get the user that we just created by id or the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetAllAsync")," method and isolate it assuming it is the only one."),(0,r.kt)("p",null,"In order to get the ID of the newly created customer we need to read the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," attribute value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"here")," text on the successful creation page:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(4198).Z,width:"1513",height:"917"})),(0,r.kt)("p",null,'Since this is a "safer" approach, because it doesn\'t assume that this is the only element in the database, we will go ahead with that.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var href = await page.Locator("text=\'here\'").GetAttributeAsync("href");\nvar href = await customerLink!.GetAttributeAsync("href");\nvar customerIdText = href!.Replace("/customer/", string.Empty);\nvar customerId = Guid.Parse(customerIdText);\n')),(0,r.kt)("p",null,"The code above will give up the id of the customer we just created and we can now use that to get the user for the database and asset their properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var createdCustomer = await _customerRepository.GetAsync(customerId);\n\ncreatedCustomer.Should().NotBeNull();\ncreatedCustomer!.FullName.Should().Be("Nick Chapsas");\ncreatedCustomer.Email.Should().Be("nick@chapsas.com");\ncreatedCustomer.GitHubUsername.Should().Be("nickchapsas");\ncreatedCustomer.DateOfBirth.Should().Be(new DateTime(1993, 9, 22));\n')),(0,r.kt)("h3",{id:"disposeasync"},"DisposeAsync"),(0,r.kt)("p",null,"Here all we need to do is close the browser page and reset the database."),(0,r.kt)("p",null,"Now it's time to add Respawn into the project to manage the database reset after each test.\nThe approach is exactly the same as in the API integration tests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="TestingContext.cs"',title:'"TestingContext.cs"'},'private readonly DbConnection _respawnDbConnection = default!;\nprivate Respawner _respawner = default!;\n\nprivate async Task InitializeRespawner()\n{\n    _respawnDbConnection = await Database.CreateConnectionAsync();\n    _respawner = await Respawner.CreateAsync(_respawnDbConnection, new RespawnerOptions\n    {\n        DbAdapter = DbAdapter.Postgres,\n        SchemasToInclude = new[] { "public" }\n    });\n}\n\npublic async Task ResetDatabaseAsync()\n{\n    await _respawner.ResetAsync(_respawnDbConnection);\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"private readonly TestingContext _testingContext;\n// highlight-next-line\nprivate readonly Func<Task> _databaseReset;\n\npublic AddCustomerTests(TestingContext testingContext)\n{\n    _testingContext = testingContext;\n    // highlight-next-line\n    _databaseReset = testingContext.ResetDatabaseAsync;\n}\n\npublic Task DisposeAsync() => _resetDatabase();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task DisposeAsync()\n{\n    await page.CloseAsync();\n    _resetDatabase();\n}\n")),(0,r.kt)("p",null,"And that's it! We can now run the test and watch it pass!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(7741).Z,width:"1637",height:"1037"})),(0,r.kt)("h2",{id:"using-bogus"},"Using Bogus"),(0,r.kt)("p",null,"The last thing left to do is to use Bogus to replace the manual creation of data. The approach is exactly the same as before."),(0,r.kt)("p",null,"First we need to create the generator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private readonly Faker<CustomerDto> _customerGenerator = new Faker<CustomerDto>()\n    .RuleFor(x => x.Id, Guid.NewGuid)\n    .RuleFor(x => x.Email, f => f.Person.Email)\n    .RuleFor(x => x.FullName, f => f.Person.FullName)\n    .RuleFor(x => x.DateOfBirth, f => f.Person.DateOfBirth.Date)\n    .RuleFor(x => x.GitHubUsername, f => f.Person.UserName.Replace(".", "").Replace("-", "").Replace("_", ""));\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Customer")," type found under ",(0,r.kt)("inlineCode",{parentName:"p"},"Models")," but you need to handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"DateOnle"),"->",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," type match with a special condition.")),(0,r.kt)("p",null,"And then we need to update our test to create a customer and use it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'private IPage _page = default!;\n\npublic async Task InitializeAsync()\n{\n    _page = await _testingContext.Browser.NewPageAsync();\n}\n\n[Fact]\npublic async Task Create_ShouldCreateCustomer_WhenDataIsValid()\n{\n    // Arrange\n    await page.GotoAsync($"{TestingContext.AppUrl}/add-customer");\n\n    var customer = _customerGenerator.Generate();\n    _testingContext.GitHubApiServer.SetupUser(customer.GitHubUsername);\n    \n    // Act\n    await page.Locator("id=fullname").FillAsync(customer.FullName);\n    await page.Locator("id=email").FillAsync(customer.Email);\n    await page.Locator("id=github-username").FillAsync(customer.GitHubUsername);\n    await page.Locator("id=dob").FillAsync(customer.DateOfBirth.ToString("yyyy-MM-dd"));\n    await page.Locator("text=Submit").ClickAsync();\n\n    // Assert\n    var href = await page.Locator("text=\'here\'").GetAttributeAsync("href");\n    var customerIdText = href!.Replace("/customer/", string.Empty);\n    var customerId = Guid.Parse(customerIdText);\n\n    var createdCustomer = await _customerRepository.GetAsync(customerId);\n    createdCustomer.Should().BeEquivalentTo(customer, x => x.Excluding(p => p.Id));\n}\n\npublic async Task DisposeAsync()\n{\n    await page.CloseAsync();\n    _resetDatabase();\n}\n')),(0,r.kt)("p",null,"And that's it! We now have a full automated UI-based integration test in place with its own docker-specific database, fake GitHub API and service with database resets after every test!"),(0,r.kt)("p",null,"Let's go ahead and write more tests!"))}u.isMDXComponent=!0},7741:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/createtest-65ce3c1cda3a93ea9556f22dad1a715b.gif"},4198:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/get-id-75fef7b2b83a11abc2780090b0889675.png"}}]);